# This file automatically generates "embedded_files.c" and "embedded_files.h",
# and places them in the build directory for convenience.

set(EMBED_LINE_SIZE 1024) # Hexadecimal bytes per line
set(EMBED_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/..)
set(EMBED_C embedded_files.c)
set(EMBED_H embedded_files.h)

# =============================================================================

set(embed_c_loc ${EMBED_DIRECTORY}/${EMBED_C})
set(embed_h_loc ${EMBED_DIRECTORY}/${EMBED_H})

set(embed_count 0)
set(embed_init "{\n")
set(embed_defines "")

file(GLOB files_to_embed CONFIGURE_DEPENDS "*.zip" "*.apworld")
math(EXPR EMBED_LINE_SIZE "${EMBED_LINE_SIZE}*2")

foreach(file_location ${files_to_embed})
    get_filename_component(file_name ${file_location} NAME)
    message(STATUS "embedded_files.c/h: Including " ${file_name} " from " ${file_location})

    # Strip out non-alphanumeric, non-underscore characters to make a "safe" filename.
    # We make defines out of these. Defines instead of enums so we can check if they exist in the preprocessor.
    string(TOUPPER ${file_name} file_name_safe)
    string(REGEX REPLACE "[^0-9A-Z_]" "_" file_name_safe ${file_name_safe})
    string(APPEND embed_defines "#define EMBEDDED_FILE_" ${file_name_safe} " " ${embed_count} "\n")

    file(READ ${file_location} file_content_hex HEX)
    string(LENGTH ${file_content_hex} file_length)
    math(EXPR file_real_length "${file_length}>>1")

	string(APPEND embed_init "\t{\n")
    string(APPEND embed_init "\t\t/* file name */ \"" ${file_name} "\",\n")
    string(APPEND embed_init "\t\t/* file size */ " ${file_real_length} ",\n")
    string(APPEND embed_init "\t\t/* data */\n")
    foreach(offset RANGE 0 ${file_length} ${EMBED_LINE_SIZE})
        string(SUBSTRING ${file_content_hex} ${offset} ${EMBED_LINE_SIZE} line)
        string(REGEX REPLACE "(..)" "\\\\x\\1" line ${line})
        string(APPEND embed_init "\t\t\"" ${line} "\"\n")
    endforeach()
    string(APPEND embed_init "\t},\n")

    math(EXPR embed_count "${embed_count}+1")
endforeach()

string(APPEND embed_init "\t{NULL}\n")
string(APPEND embed_init "}")
string(APPEND embed_defines "#define NUM_EMBEDDED_FILES " ${embed_count})
math(EXPR embed_array_size "${embed_count}+1")

set(embed_h_contents "// Do not modify this file!
// It is automatically generated by the CMake build system
#ifndef __EMBEDDED_FILES_H__
#define __EMBEDDED_FILES_H__

#include <stddef.h>

typedef struct {
\tconst char *name\;
\tconst size_t size\;
\tconst char *data\;
} embedded_file_t\;

extern const embedded_file_t embedded_files[${embed_array_size}]\;

${embed_defines}

#endif // __EMBEDDED_FILES_H__
")

set(embed_c_contents "// Do not modify this file!
// It is automatically generated by the CMake build system
#include \"${EMBED_H}\"

const embedded_file_t embedded_files[${embed_array_size}] = ${embed_init}\;
")

file(WRITE ${embed_h_loc} ${embed_h_contents})
file(WRITE ${embed_c_loc} ${embed_c_contents})
message(STATUS "embedded_files.c/h: " ${embed_count} " total files included")
set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${files_to_embed})
add_library(embeds STATIC ${embed_c_loc} ${embed_h_loc})
